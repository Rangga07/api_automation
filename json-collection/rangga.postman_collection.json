{
	"info": {
		"_postman_id": "f1405862-a09f-4675-baf4-8ef870f60f52",
		"name": "Simple Book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11794014",
		"_collection_link": "https://bold-star-704597.postman.co/workspace/SingleQueue~c1e848f3-8e0b-4ee8-a516-61e24e939ffd/collection/11794014-f1405862-a09f-4675-baf4-8ef870f60f52?action=share&source=collection_link&creator=11794014"
	},
	"item": [
		{
			"name": "POSTregister",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2);\r",
							"\r",
							"var name = \"rangga\"+random\r",
							"var email = \"rangga\"+random+\"@gmail.com\";\r",
							"\r",
							"pm.globals.set(\"clientName\", name);\r",
							"pm.globals.set(\"clientEmail\", email);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"accessToken\",responseBody.accessToken);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains acces token\", function() {\r",
							"    pm.expect(responseBody.accessToken).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body value validations\", function () {\r",
							"    pm.expect(responseBody.accessToken).to.eql(pm.environment.get(\"accessToken\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{clientName}}\",\r\n   \"clientEmail\": \"{{clientEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api-clients/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GETorders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body validation key\", function() {\r",
							"    responseBody.forEach(function (item) {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"bookId\");\r",
							"        pm.expect(item).to.have.property(\"customerName\");\r",
							"        pm.expect(item).to.have.property(\"createdBy\");\r",
							"        pm.expect(item).to.have.property(\"quantity\");\r",
							"        pm.expect(item).to.have.property(\"timestamp\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response body 'customer name' value validation\", function() {\r",
							"    responseBody.forEach(function(item) {\r",
							"        pm.expect(item.customerName).to.be.oneOf([\"Rani\", \"Rangga\"])\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "POSTsubmitorder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"orderId\",responseBody.orderId);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body key validations\", function() {\r",
							"    pm.expect(responseBody.created).to.exist;\r",
							"    pm.expect(responseBody.orderId).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body value validations\", function () {\r",
							"    pm.expect(responseBody.created).to.equal(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{customerName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GETsingleorder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body key validations\", function(){\r",
							"    pm.expect(responseBody.id).to.exist;\r",
							"    pm.expect(responseBody.bookId).to.exist;\r",
							"    pm.expect(responseBody.customerName).to.exist;\r",
							"    pm.expect(responseBody.createdBy).to.exist;\r",
							"    pm.expect(responseBody.quantity).to.exist;\r",
							"    pm.expect(responseBody.timestamp).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body value validations\", function() {\r",
							"    pm.expect(responseBody.id).to.eql(pm.environment.get(\"orderId\"));\r",
							"    pm.expect(responseBody.bookId).to.eql(parseInt(pm.globals.get(\"bookId\")));\r",
							"    pm.expect(responseBody.customerName).to.eql(pm.globals.get(\"customerName\"));\r",
							"    pm.expect(responseBody.quantity).to.eql(1);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCHupdateorder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Rangga H\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GETsinglebook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body key validations\", function () {\r",
							"    pm.expect(responseBody.id).to.exist;\r",
							"    pm.expect(responseBody.name).to.exist;\r",
							"    pm.expect(responseBody.author).to.exist;\r",
							"    pm.expect(responseBody.isbn).to.exist;\r",
							"    pm.expect(responseBody.type).to.exist;\r",
							"    pm.expect(responseBody.price).to.exist;\r",
							"    pm.expect(responseBody.available).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body value validations\", function () {\r",
							"    pm.expect(responseBody.id).to.eql(parseInt(pm.globals.get(\"bookId\")))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/books/:bookID",
					"host": [
						"{{url}}"
					],
					"path": [
						"books",
						":bookID"
					],
					"variable": [
						{
							"key": "bookID",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GETbooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body key validations\", function() {\r",
							"    responseBody.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"type\");\r",
							"        pm.expect(item).to.have.property(\"available\");\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/books?type=&limit=",
					"host": [
						"{{url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": ""
						},
						{
							"key": "limit",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETEorder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/orders/:orderId",
					"host": [
						"{{url}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	]
}